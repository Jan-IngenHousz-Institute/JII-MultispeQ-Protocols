{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/Jan-IngenHousz-Institute/JII-MultispeQ-Protocols/schema.json",
  "title": "MultispeQ Protocol Schema",
  "description": "Schema for validating MultispeQ device measurement protocols.",
  "type": "array",
  "minItems": 1,
  "items": {
    "type": "object",
    "$ref": "#/$defs/protocol"
  },
  "$defs": {
    "array_num_str_var": {
      "type": "array",
      "items": {
        "type": [
          "string",
          "number"
        ],
        "pattern": "(^@[nps]{1}[0-9]{1,2}:[0-9]{1,2}$)|(^(previous_)?light_intensity$)|(^(p_)?light$)",
        "description": "Input must be a number, light_intensity, previous_light_intensity, p_light, or a variable reference (@s0, @p0, @n0:1)"
      }
    },
    "pre_illumination": {
      "type": "array",
      "prefixItems": [
        {
          "type": [
            "string",
            "integer"
          ],
          "minimum": 1,
          "maximum": 10,
          "description": "LED for illumination"
        },
        {
          "type": [
            "string",
            "number"
          ],
          "description": "Illumination duration in ms"
        },
        {
          "type": [
            "string",
            "number"
          ],
          "description": "Intensity in in µE * s⁻¹ * m⁻² (PAR)"
        }
      ],
      "minItems": 3,
      "maxItems": 3
    },
    "open_close_start": {
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "description": "Set to 1 to wait until clamp is opened and closed to proceed, otherwise set to 0"
    },
    "protocol": {
      "type": "object",
      "properties": {
        "_protocol_set_": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/$defs/protocol",
            "description": "Protocol within the protocol set"
          },
          "description": "Treating protocols as integrated sets",
          "examples": [
            [
              {
                "label": "PAM"
              },
              {
                "label": "ECS"
              }
            ]
          ]
        },
        "adc_show": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "ADC values are outputted in data_raw instead of the regular output",
          "examples": [
            0
          ]
        },
        "autogain": {
          "type": "array",
          "items": {
            "type": "array",
            "description": "Automatic gain control settings",
            "prefixItems": [
              {
                "type": "integer",
                "minimum": 0,
                "maximum": 9,
                "description": "Index for storing gain settings"
              },
              {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "description": "Select pulsed LED to test"
              },
              {
                "type": "integer",
                "minimum": 1,
                "maximum": 3,
                "description": "Select detector to use"
              },
              {
                "type": "number",
                "minimum": 1,
                "maximum": 65535,
                "description": "Duration in microseconds"
              },
              {
                "type": "number",
                "minimum": 0,
                "maximum": 65535,
                "description": "Target Value, recommended: 40000-50000"
              }
            ],
            "minItems": 5,
            "maxItems": 5,
            "additionalItems": false
          },
          "maxItems": 10,
          "description": "Automatic gain control. Multiple gain functions can be added.",
          "examples": [
            [
              [
                2,
                1,
                3,
                12,
                50000
              ],
              [
                3,
                8,
                1,
                80,
                50000
              ]
            ]
          ]
        },
        "averages": {
          "type": "number",
          "minimum": 0,
          "maximum": 10000,
          "description": "Number of times to average the protocol",
          "examples": [
            3
          ]
        },
        "averages_delay": {
          "type": "number",
          "minimum": 0,
          "maximum": 999999999999,
          "description": "Delay between protocol averages in ms",
          "examples": [
            2000
          ]
        },
        "dac_lights": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "When set to 1, values of 'pulsed_lights_brightness' and 'nonpulsed_lights_brightness' are interpreted as 12-bit values (0 - 4095) controlling the DAC instead of PAR values.",
          "examples": [
            0
          ]
        },
        "detectors": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/array_num_str_var"
          },
          "description": "Detectors used in measurement, data returned in data_raw",
          "examples": [
            [
              [
                3
              ],
              [
                3
              ],
              [
                "@s0"
              ],
              [
                3
              ]
            ]
          ]
        },
        "energy_min_wake_time": {
          "type": "number",
          "minimum": 0,
          "maximum": 1000000,
          "description": "Adjust time between 5V shutdown and wake up time in ms",
          "examples": [
            7000
          ]
        },
        "energy_save_timeout": {
          "type": "number",
          "minimum": 0,
          "maximum": 1000000,
          "description": "Adjust Energy Save Timeout in ms",
          "examples": [
            300000
          ]
        },
        "environmental": {
          "type": "array",
          "items": {
            "type": "array",
            "description": "Environmental measurement configuration",
            "prefixItems": [
              {
                "type": "string",
                "anyOf": [
                  {
                    "pattern": "(^(p_)?light$)|(^detector_read[0-9]?$)"
                  },
                  {
                    "enum": [
                      "light_intensity",
                      "previous_light_intensity",
                      "temperature_humidity_pressure",
                      "temperature_humidity_pressure2",
                      "thp",
                      "thp2",
                      "thickness",
                      "thickness_raw",
                      "compass_and_angle",
                      "contactless_temp"
                    ]
                  }
                ]
              },
              {
                "type": "number"
              },
              {
                "type": "number"
              },
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ]
          },
          "examples": [
            [
              [
                "light_intensity"
              ],
              [
                "temperature_humidity_pressure"
              ],
              [
                "temperature_humidity_pressure2"
              ],
              [
                "contactless_temp"
              ],
              [
                "thickness"
              ],
              [
                "compass_and_angle"
              ]
            ]
          ]
        },
        "environmental_array": {
          "type": "array",
          "items": [
            {
              "type": "array",
              "prefixItems": [
                {
                  "type": "number"
                }
              ]
            }
          ],
          "description": "",
          "examples": [
            [
              [
                1
              ]
            ]
          ]
        },
        "indicator": {
          "type": "array",
          "prefixItems": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Red channel"
            },
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "Green channel"
            },
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 2550,
              "description": "Blue channel"
            },
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 255,
              "description": "White channel"
            }
          ],
          "minItems": 4,
          "maxItems": 4,
          "description": "Change the color of the indicator Light (MultispeQ v2) defining the color using the channels Red, Green, Blue. The White channel needs to be defined but is ignored. All channels at 0 will turn the light off.",
          "examples": [
            [
              255,
              0,
              0,
              0
            ],
            [
              0,
              128,
              128,
              0
            ],
            [
              0,
              0,
              0,
              0
            ]
          ]
        },
        "ir_baseline": {},
        "label": {
          "type": "string",
          "description": "Provide a label to a sub-protocol",
          "examples": [
            "PAM",
            "ECS"
          ]
        },
        "max_hold_time": {
          "type": "number",
          "description": "Set time (in ms) at which the hold commands timeout, default is 15000",
          "examples": [
            15000
          ]
        },
        "measurements": {
          "type": "number",
          "description": "Number of measurement repeats, which is a set of protocols",
          "examples": [
            2
          ]
        },
        "measurements_delay": {
          "type": "number",
          "description": "Delay between measurement repeats in ms",
          "examples": [
            30
          ]
        },
        "message": {
          "type": "array",
          "items": [
            {
              "type": "array",
              "prefixItems": [
                {
                  "type": "string",
                  "enum": [
                    "alert",
                    "prompt",
                    "confirm"
                  ],
                  "description": "Message type"
                },
                {
                  "type": "string",
                  "description": "Message content"
                }
              ],
              "minItems": 2,
              "maxItems": 2
            }
          ],
          "description": "Send message to user between pulse sets.",
          "examples": [
            [
              [
                "alert",
                "Measurement noisy"
              ]
            ],
            [
              [
                "prompt",
                "What is the leaf color"
              ]
            ],
            [
              [
                "confirm",
                "Is the leaf clamped?"
              ]
            ]
          ]
        },
        "nonpulsed_lights": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/array_num_str_var"
          },
          "description": "Select LEDs that are not pulsed during a pulse set",
          "examples": [
            [
              [
                2,
                2,
                2,
                2
              ]
            ]
          ]
        },
        "nonpulsed_lights_brightness": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/array_num_str_var"
          },
          "description": "LED brightness in µE * s⁻¹ * m⁻² (PAR) for non pulsed lights",
          "examples": [
            [
              [
                100,
                100,
                200,
                300
              ]
            ]
          ]
        },
        "number_samples": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Number of samples taken by the ADC (analog to digital converter)",
          "examples": [
            10
          ]
        },
        "open_close_start": {
          "$ref": "#/$defs/open_close_start",
          "examples": [
            1
          ]
        },
        "par_led_start_on_close": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Ambient light intensity is measured and matched by selected LED until the clamp is closed",
          "examples": [
            2
          ]
        },
        "par_led_start_on_open": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Ambient light intensity is measured and matched by selected LED when the clamp is opened",
          "examples": [
            1
          ]
        },
        "par_led_start_on_open_close": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Ambient light intensity is measured and matched by selected LED until the clamp is closed",
          "examples": [
            2
          ]
        },
        "pre_illumination": {
          "oneOf": [
            {
              "$ref": "#/$defs/pre_illumination"
            },
            {
              "type": "array",
              "items": [
                {
                  "$ref": "#/$defs/pre_illumination"
                }
              ]
            }
          ],
          "description": "Sample illumination with a single LED at a set duration and light intensity",
          "examples": [
            [
              2,
              200,
              600000
            ],
            [
              [
                2,
                200,
                600000
              ],
              [
                3,
                400,
                600000
              ]
            ]
          ]
        },
        "protocol_repeats": {
          "type": "number",
          "minimum": 0,
          "maximum": 1000000,
          "examples": [
            30
          ]
        },
        "protocols": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "examples": [
            2
          ]
        },
        "protocols_delay": {
          "type": "number",
          "minimum": 0,
          "maximum": 999999999,
          "examples": [
            2000
          ]
        },
        "pulse_distance": {
          "type": "array",
          "items": {
            "type": [
              "string",
              "number"
            ],
            "pattern": "(^@n{1}[0-9]{1,2}:[0-9]{1,2}$)|(^@[sp]{1}[0-9]{1,2}$)|(^a_d[0-9]{1}$)",
            "examples": [
              [
                30
              ],
              [
                "@p1"
              ]
            ]
          }
        },
        "pulse_length": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": [
                "string",
                "number"
              ],
              "pattern": "(^auto_duration[0-9]?$)|(^@n{1}[0-9]{1,2}:[0-9]{1,2}$)|(^@[sp]{1}[0-9]{1,2}$)|(^a_d[0-9]{1}$)"
            }
          },
          "examples": [
            [
              [
                20,
                20,
                20,
                20
              ]
            ]
          ]
        },
        "pulsed_lights": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/array_num_str_var"
          },
          "examples": [
            [
              [
                1,
                1,
                1,
                2
              ]
            ]
          ]
        },
        "pulsed_lights_brightness": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": [
                "string",
                "number"
              ],
              "pattern": "(^auto_bright[0-9]?$)|(^@n{1}[0-9]{1,2}:[0-9]{1,2}$)|(^@[sp]{1}[0-9]{1,2}$)|(^a_b[0-9]{1}$)"
            }
          },
          "examples": [
            [
              [
                100,
                "auto_bright[1]",
                300,
                100
              ]
            ]
          ]
        },
        "pulses": {
          "type": "array",
          "items": {
            "type": [
              "integer",
              "string"
            ],
            "pattern": "(^@n{1}[0-9]{1,2}:[0-9]{1,2}$)|(^@[sp]{1}[0-9]{1,2}$)"
          },
          "description": "Pulses defines sequence the measurement pulses by the LEDs during a measurement",
          "examples": [
            [
              10,
              10,
              50,
              "@n1:2",
              100
            ]
          ]
        },
        "recall": {
          "type": "array",
          "items": [
            {
              "type": "string",
              "pattern": "^userdef\\[[0-9]\\]$"
            }
          ],
          "description": "Load value from device memory (EEPROM).",
          "examples": [
            [
              "userdef[1]"
            ]
          ]
        },
        "reference": {
          "type": "array",
          "items": [
            {
              "type": "array",
              "prefixItems": [
                {
                  "type": "number",
                  "minimum": 1,
                  "maximum": 4
                }
              ],
              "minItems": 1,
              "maxItems": 1
            }
          ],
          "description": "Specify another detector to be measured and subtracted from detector.",
          "examples": [
            [
              [
                1
              ]
            ],
            [
              [
                1,
                2
              ]
            ]
          ]
        },
        "save": {
          "type": "array",
          "items": [
            {
              "type": "array",
              "prefixItems": [
                {
                  "type": "number",
                  "description": "Storage Location"
                },
                {
                  "type": "number",
                  "description": "Value to be stored in selected location"
                }
              ],
              "minItems": 2,
              "maxItems": 2
            }
          ],
          "description": "Save value to device memory (EEPROM).",
          "examples": [
            [
              [
                1,
                1500
              ]
            ]
          ]
        },
        "save_trace_time_scale": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Set to 1 to save time scale for trace as data_raw_time, otherwise set to 0.",
          "examples": [
            1
          ]
        },
        "set_led_delay": {
          "type": "array",
          "items": [
            {
              "type": "array",
              "prefixItems": [
                {
                  "type": "integer",
                  "enum": [
                    1,
                    10
                  ],
                  "description": "LED identification number"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "description": "Illumination duration in ms"
                },
                {
                  "type": "number",
                  "enum": [
                    0,
                    2500
                  ],
                  "description": "Light intensity in µE * s⁻¹ * m⁻² (PAR)"
                }
              ],
              "minItems": 3,
              "maxItems": 3
            }
          ],
          "minItems": 1,
          "maxItems": 10,
          "description": "Set pre-illumination with a selected LED for a specific amount of time. (Multiple LEDs can be used).",
          "examples": [
            [
              [
                2,
                20000,
                0
              ],
              [
                2,
                20000,
                100
              ]
            ]
          ]
        },
        "set_light_intensity": {
          "type": "number",
          "minimum": 0,
          "maximum": 2500,
          "description": "Set a constant actinic background light intensity.",
          "examples": [
            1500
          ]
        },
        "spad": {
          "oneOf": [
            {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            {
              "type": "array",
              "prefixItems": [
                {
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                }
              ],
              "minItems": 1,
              "maxItems": 1
            }
          ],
          "description": "Measure relative Chlorophyll content (SPAD - Special Products Analysis Division)",
          "examples": [
            1,
            [
              1
            ]
          ]
        },
        "start_on_close": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Set to 1, to wait for the protocol to run until clamp is closed, otherwise set to 0",
          "examples": [
            1
          ]
        },
        "start_on_open": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Set to 1, to wait for the protocol to run until clamp is opened, otherwise set to 0",
          "examples": [
            1
          ]
        },
        "start_on_open_close": {
          "$ref": "#/$defs/open_close_start",
          "examples": [
            1
          ]
        },
        "v_arrays": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/array_num_str_var",
            "maxItems": 10
          },
          "maxItems": 4,
          "description": "Storing variables in arrays available within the protocol",
          "examples": [
            [
              [
                1,
                2
              ],
              [
                100,
                200
              ]
            ]
          ]
        }
      },
      "dependentRequired": {
        "pulses": [
          "pulse_length",
          "pulse_distance"
        ],
        "pulse_length": [
          "pulses",
          "pulse_distance"
        ],
        "pulse_distance": [
          "pulses",
          "pulse_length"
        ],
        "pulsed_lights": [
          "pulsed_lights_brightness"
        ],
        "pulsed_lights_brightness": [
          "pulsed_lights"
        ]
      }
    }
  }
}